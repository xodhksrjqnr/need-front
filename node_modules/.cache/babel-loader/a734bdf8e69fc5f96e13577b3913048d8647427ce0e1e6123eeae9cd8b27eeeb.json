{"ast":null,"code":"var _jsxFileName = \"/Users/taewan/Desktop/my/toyProject/need/client_front_server/src/component/js/PostList.js\",\n  _s = $RefreshSig$();\nimport '../css/post-list.css';\nimport { useEffect, useRef, useState } from \"react\";\nimport axios from \"axios\";\nimport Post from \"./Post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostList(_ref) {\n  _s();\n  let {\n    postListApi\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n  const postNum = useRef(0);\n  const target = useRef();\n  const getPostList = () => {\n    axios.get(postListApi + \"offset=\" + postNum.current).then(response => {\n      const arrPost = [];\n      const curDate = new Date();\n      response.data.forEach(p => {\n        if (curDate < new Date(p.closingDate)) arrPost.push( /*#__PURE__*/_jsxDEV(Post, {\n          post: p\n        }, p.postId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 38\n        }, this));\n      });\n      setPosts(prevPosts => prevPosts.concat(arrPost));\n      postNum.current += response.data.length;\n      if (target.current !== null && target.current !== undefined) {\n        observer.unobserve(target.current);\n      }\n      if (response.data.length === 20) {\n        target.current = arrPost[arrPost.length - 1];\n        observer.observe(target.current);\n      } else {\n        target.current = null;\n      }\n    });\n  };\n  const observer = new IntersectionObserver(getPostList, {\n    threshold: 0.2\n  });\n  useEffect(() => {\n    if (target.current !== null) {\n      getPostList();\n    }\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postList\",\n    children: posts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(PostList, \"ctmtrqzZPi2tgGnikEebzzNzRkQ=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["useEffect","useRef","useState","axios","Post","jsxDEV","_jsxDEV","PostList","_ref","_s","postListApi","posts","setPosts","postNum","target","getPostList","get","current","then","response","arrPost","curDate","Date","data","forEach","p","closingDate","push","post","postId","fileName","_jsxFileName","lineNumber","columnNumber","prevPosts","concat","length","undefined","observer","unobserve","observe","IntersectionObserver","threshold","className","children","_c","$RefreshReg$"],"sources":["/Users/taewan/Desktop/my/toyProject/need/client_front_server/src/component/js/PostList.js"],"sourcesContent":["import '../css/post-list.css';\nimport {useEffect, useRef, useState} from \"react\";\nimport axios from \"axios\";\nimport Post from \"./Post\";\n\nfunction PostList({postListApi}) {\n    const [posts, setPosts] = useState([]);\n    const postNum = useRef(0);\n    const target = useRef();\n\n    const getPostList = () => {\n        axios.get(postListApi + \"offset=\" + postNum.current)\n            .then((response) => {\n                const arrPost = [];\n                const curDate = new Date();\n                response.data.forEach(p => {\n                    if (curDate < new Date(p.closingDate))\n                        arrPost.push(<Post key={p.postId} post={p}/>)\n                });\n                setPosts(prevPosts => prevPosts.concat(arrPost));\n                postNum.current += response.data.length;\n                if (target.current !== null && target.current !== undefined) {\n                    observer.unobserve(target.current);\n                }\n                if (response.data.length === 20) {\n                    target.current = arrPost[arrPost.length - 1];\n                    observer.observe(target.current);\n                } else {\n                    target.current = null;\n                }\n            });\n    };\n\n    const observer = new IntersectionObserver(getPostList, { threshold: 0.2 });\n\n    useEffect(() => {\n        if (target.current !== null) {\n            getPostList();\n        }\n    }, [target]);\n\n    return (\n        <div className=\"postList\">\n            {posts}\n        </div>\n    )\n}\n\nexport default PostList;"],"mappings":";;AAAA,OAAO,sBAAsB;AAC7B,SAAQA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACjD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,QAAQA,CAAAC,IAAA,EAAgB;EAAAC,EAAA;EAAA,IAAf;IAACC;EAAW,CAAC,GAAAF,IAAA;EAC3B,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMW,OAAO,GAAGZ,MAAM,CAAC,CAAC,CAAC;EACzB,MAAMa,MAAM,GAAGb,MAAM,EAAE;EAEvB,MAAMc,WAAW,GAAGA,CAAA,KAAM;IACtBZ,KAAK,CAACa,GAAG,CAACN,WAAW,GAAG,SAAS,GAAGG,OAAO,CAACI,OAAO,CAAC,CAC/CC,IAAI,CAAEC,QAAQ,IAAK;MAChB,MAAMC,OAAO,GAAG,EAAE;MAClB,MAAMC,OAAO,GAAG,IAAIC,IAAI,EAAE;MAC1BH,QAAQ,CAACI,IAAI,CAACC,OAAO,CAACC,CAAC,IAAI;QACvB,IAAIJ,OAAO,GAAG,IAAIC,IAAI,CAACG,CAAC,CAACC,WAAW,CAAC,EACjCN,OAAO,CAACO,IAAI,eAACrB,OAAA,CAACF,IAAI;UAAgBwB,IAAI,EAAEH;QAAE,GAAlBA,CAAC,CAACI,MAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAY,CAAC;MACrD,CAAC,CAAC;MACFrB,QAAQ,CAACsB,SAAS,IAAIA,SAAS,CAACC,MAAM,CAACf,OAAO,CAAC,CAAC;MAChDP,OAAO,CAACI,OAAO,IAAIE,QAAQ,CAACI,IAAI,CAACa,MAAM;MACvC,IAAItB,MAAM,CAACG,OAAO,KAAK,IAAI,IAAIH,MAAM,CAACG,OAAO,KAAKoB,SAAS,EAAE;QACzDC,QAAQ,CAACC,SAAS,CAACzB,MAAM,CAACG,OAAO,CAAC;MACtC;MACA,IAAIE,QAAQ,CAACI,IAAI,CAACa,MAAM,KAAK,EAAE,EAAE;QAC7BtB,MAAM,CAACG,OAAO,GAAGG,OAAO,CAACA,OAAO,CAACgB,MAAM,GAAG,CAAC,CAAC;QAC5CE,QAAQ,CAACE,OAAO,CAAC1B,MAAM,CAACG,OAAO,CAAC;MACpC,CAAC,MAAM;QACHH,MAAM,CAACG,OAAO,GAAG,IAAI;MACzB;IACJ,CAAC,CAAC;EACV,CAAC;EAED,MAAMqB,QAAQ,GAAG,IAAIG,oBAAoB,CAAC1B,WAAW,EAAE;IAAE2B,SAAS,EAAE;EAAI,CAAC,CAAC;EAE1E1C,SAAS,CAAC,MAAM;IACZ,IAAIc,MAAM,CAACG,OAAO,KAAK,IAAI,EAAE;MACzBF,WAAW,EAAE;IACjB;EACJ,CAAC,EAAE,CAACD,MAAM,CAAC,CAAC;EAEZ,oBACIR,OAAA;IAAKqC,SAAS,EAAC,UAAU;IAAAC,QAAA,EACpBjC;EAAK;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEd;AAACxB,EAAA,CAzCQF,QAAQ;AAAAsC,EAAA,GAARtC,QAAQ;AA2CjB,eAAeA,QAAQ;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}